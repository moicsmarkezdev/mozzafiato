{%- liquid
  assign breadcrumbs_enabled = section.settings.breadcrumbs-enabled
  assign column_spacing = section.settings.column-spacing
  assign container_width = section.settings.container-width
  assign current_variant = product.selected_or_first_available_variant
  assign heading_sizes_enabled = section.settings.heading-sizes-enabled
  assign heading_size = section.settings.heading-size
  assign media_gap = section.settings.media-gap
  assign media_layout = section.settings.media-layout
  assign mobile_media_layout = section.settings.mobile-media-layout
  assign product_id = product.id | append: '-' | append: section.id
  assign spacing_above = section.settings.spacing-above
  assign spacing_below = section.settings.spacing-below
  assign text_alignment = section.settings.text-alignment
  assign text_column_width = section.settings.text-column-width
  assign thumbnail_width = section.settings.thumbnail-width
  assign variant_scroll_enabled = section.settings.variant-scroll-enabled
  assign video_looping_enabled = section.settings.loop-enabled
  assign zoom_enabled = section.settings.image-zoom-enabled

  assign heading_enabled = section.settings.heading-enabled
  if media_layout == 'thumbnails'
    assign heading_enabled = false
  endif

  assign onboarding = true
  assign modal_enabled = false
  if product.media.size > 0
    assign onboarding = false
    assign modal_enabled = section.settings.modal-enabled
  endif

  capture css_vars
    echo '--text-column-width:' | append: text_column_width | append: '%;'
    echo '--media-gap:' | append: media_gap | append: 'px;'
    echo '--thumbnail-width:' | append: thumbnail_width | append: 'px;'
  endcapture

  render 'section-assets', name: 'product-page', type: 'style'
-%}

<div
  class="product-page--root"
  data-product-id="{{ product_id }}"
  data-section-id="{{ section.id }}"
  data-section-type="product_page"
  data-container-width="{{ container_width }}"
  data-spacing-above="{{ spacing_above }}"
  data-spacing-below="{{ spacing_below }}"
  data-text-alignment="{{ text_alignment }}"
  style="{{ css_vars }}"
>
  <div class="product-page--wrapper">
    {%- if heading_enabled -%}
      <div class="product-page--header" data-mq="medium-large">
        <h1
          class="product-page--title"
          data-item="featured-heading"
          {%- if heading_sizes_enabled -%}
            style="font-size:{{ heading_size | plus: 24 }}px;"
          {%- endif -%}
        >
          {{- product.title -}}
        </h1>
      </div>
    {%- endif -%}

    <div class="product-page--desktop-container" data-mq="medium-large">
      {%-
        render 'product-media--variants',
        product: product,
        product_id: product_id,
        layout: media_layout,
        media_gap: media_gap,
        modal_enabled: modal_enabled,
        column_spacing: column_spacing,
        thumbs_enabled: true,
        variant_scroll_enabled: variant_scroll_enabled,
        video_looping_enabled: video_looping_enabled,
        zoom_enabled: zoom_enabled
      -%}
    </div>

    <div class="product-page--mobile-container" data-mq="small">
      {%- if mobile_media_layout == 'thumbnails' -%}
        {%-
          render 'product-media--variants',
          product: product,
          product_id: product_id,
          layout: 'thumbnails',
          thumbs_enabled: true,
          video_looping_enabled: video_looping_enabled
        -%}

      {%- elsif mobile_media_layout == 'slideshow' -%}
        {%- render 'section-assets', name: 'product-media--carousel', type: 'script' -%}

        <product-media-carousel
          class="product-page--carousel"
          data-id="{{ product_id }}"
          data-mq="small"
        >
          {%
            render 'carousel',
            view: "product-page",
            section_id: section.id,
            onboarding: onboarding,
            product: product,
            video_looping_enabled: video_looping_enabled,
            blocks: product.media,
            dot_nav_enabled: true,
            media_size: "mobile",
            blocks_per_slide: 1,
            blocks_per_slide_mobile: 1,
            total_blocks: product.media.size,
            total_slides: product.media.size,
            spacing_around_blocks: true,
            transition_type: "slide"
          -%}
        </product-media-carousel>
      {%- endif -%}
    </div>

    <div class="product-page--info">
      {%- if breadcrumbs_enabled -%}
        <div
          class="product-page--breadcrumbs"
          data-mq="medium-large"
          data-transition-item="{{ section.id }}"
        >
          {%- render 'breadcrumbs' -%}
        </div>
      {%- endif -%}

      {%- for block in section.blocks -%}
        {%- liquid
          assign fit_together = false
          if block.type == 'collapsible-row'
            assign fit_together = true
          elsif block.type == 'complementary-products' and block.settings.collapsible-row-enabled
            assign fit_together = true
          endif
        -%}

        <div
          class="product-page--block"
          data-product-block
          data-block-type="{{ block.type }}"
          data-fit-together="{{ fit_together }}"
          {{ block.shopify_attributes }}
        >
          {%- case block.type -%}
            {%- when 'overline' -%}
              <div class="product-page--overline" data-item="overline">
                {{- block.settings.text -}}
              </div>

            {%- when 'heading' -%}
              <div
                data-transition-cropper
                data-transition-item="theme"
                data-transition-type="mask"
              >
                {%- if heading_enabled -%}
                  <h2 class="product-page--heading" data-item="section-heading">
                    {{- product.title -}}
                  </h2>
                {%- else -%}
                  <h1 class="product-page--heading" data-item="section-heading">
                    {{- product.title -}}
                  </h1>
                {%- endif -%}
              </div>

            {%- when 'vendor' -%}
              <div class="product-page--vendor" data-item="light-accent-text">
                <a href="{{ product.vendor | url_for_vendor }}">
                  {{- product.vendor -}}
                </a>
              </div>

            {%- when 'price' -%}
              {%- if product.metafields.custom.product_bundle == true and product.metafields.custom.productos_bundles.value != blank -%}
                
                {%- assign totalPrice = 0 -%}
                {%- assign tax_included_t = 'products.tax_included' | t -%}
                {%- for item_bundle in product.metafields.custom.productos_bundles.value -%}
                  {%- for product_bundle in item_bundle.products.value -%}
                      {%- if forloop.first -%}
                        {%- assign totalPrice = product_bundle.first_available_variant.price | plus: totalPrice -%}
                      {%- endif -%}
                  {%- endfor -%}
                {%- endfor -%}

                <div class="product-price--wrapper">
                  <div class="product-price--original" data-item='accent-text'>
                    {{ totalPrice | money }}
                  </div>
                </div>
                {%- if cart.taxes_included -%}
                  <div class="product-price--tax" data-item="small-text">
                    {{- tax_included_t -}}
                  </div>
                {%- endif -%}
              {%- else -%}
                {%- render 'product-price', product: product, id: product_id -%}
              {%- endif -%}
            {%- when 'low-stock' -%}
              {%-
                render 'product-low-stock',
                id: product_id,
                current_variant: current_variant,
                threshold: block.settings.threshold
              -%}

            {%- when 'options' -%}
              {%-
                render "product-options",
                id: product_id,
                product: product,
                block_settings: block.settings
              -%}

            {%- when 'quantity-selector' -%}
              {%-
                render 'quantity-selector',
                id: product_id,
                type: 'product'
              -%}

            {%- when 'buy-buttons' -%}
              {%- if product.metafields.custom.product_bundle == true and product.metafields.custom.productos_bundles.value != blank -%}
                <bundle-select>
                  {%- for item_bundle in product.metafields.custom.productos_bundles.value -%}
                    <div class="bundle__container">
                      <span class="bundle_container__title">{{ item_bundle.title }}:</span>
                      {%- for product_bundle in item_bundle.products.value -%}
                        
                          <div class="bundle_item__wrapper {% if forloop.first and product_bundle.first_available_variant.id != blank %}active{% endif %}" {% if product_bundle.first_available_variant.id != blank %} data-vaiantId="{{ product_bundle.first_available_variant.id }}" data-variantPrice="{{ product_bundle.first_available_variant.price | money_without_currency }}" {% else %} disable="disable" {% endif %} >
                            <div class="item__img">
                              <img src="{{ product_bundle.featured_image | image_url: width: 150 }}" loading="lazy" width="100px" height="auto" >
                            </div>
                            <div class="bundle__title">
                              {{ product_bundle.title }}
                            </div>
                          </div>
                        
                      {%- endfor -%}
                    </div>
                  {%- endfor -%}
                  <bundle-addtocart>
                    {%- liquid
                      assign add_to_cart_t = 'products.add_to_cart' | t
                      assign out_of_stock_t = 'products.out_of_stock' | t
                    %}
                    <div class="product-buy-buttons--primary" data-enabled="true" data-loading="false"  data-item='secondary-button' >
                      <button type="button" class="product-buy-buttons--cta" data-parent-id="{{ product.id }}">
                        <span class="product-buy-buttons--cta-text">
                          {%- liquid if true
                              echo add_to_cart_t
                            else
                              echo out_of_stock_t
                            endif
                          -%}
                        </span>
                        <span class="product-buy-buttons--spinner"> {%- render 'icons', icon: 'spinner' -%} </span>
                      </button>
                    </div>
                  </bundle-addtocart>
                </bundle-select>
                <style>

                  .bundle_container__title {
                    flex: 1 1 100%;
                  }
                  .bundle__container {
                    display: flex;
                    flex-flow: row wrap;
                    width: 100%;
                    align-items: flex-start;
                    justify-content: space-between;
                  }

                  .bundle_item__wrapper {
                    display: flex;
                    flex-flow: column;
                    align-items: center;
                    justify-content: flex-start;
                    border: 1px solid #e1e1e1;
                    width: 48%;
                    border-radius: 5px;
                    margin-bottom: 10px;
                    user-select: none;
                    cursor: pointer;
                  }

                  .item__img {
                    max-width: 100px;
                    overflow: hidden;
                    padding: 0px;
                  }

                  .bundle__title {
                    display: flex;
                    flex-flow: column;
                    font-size: 14px;
                  }
                  
                 .bundle_item__wrapper.active {
                  border: 2px solid var(--bg-color--button);
                  color: var(--bg-color--button);
                 }
                 
                 .bundle_item__wrapper[disable] {
                    border: 2px solid #c4cdd5;
                    color: #c4cdd5;
                    user-select: none;
                    pointer-events: none;
                    position: relative;
                    overflow: hidden;
                  }

                  .bundle_item__wrapper[disable] .item__img {
                    opacity: .67;
                  }
                 
                  .bundle_item__wrapper[disable]::after {
                    content: "";
                    width: 230px;
                    height: 2px;
                    border: 1px solid;
                    transform: rotate(37deg);
                    top: 70px;
                    left: -25px;
                    position: absolute;
                  }
                 

                 /* .bundle_item__wrapper.active .bundle__title {
                    display: flex;
                    flex-flow: column;
                    font-size: 14px;
                  } */

                  /* .icon--spinner {
                    width: 100px;
                    position: absolute;
                  } */

                </style>
                <script>
                  class bundeSelect extends HTMLElement {
                    constructor(){
                      super();

                      this.bundlesItem = this.querySelectorAll('.bundle_item__wrapper');
                      this.wrapperPrice = document.querySelector('.product-price--original');
                      this.bundlesItem.forEach(elm => elm.addEventListener('click', this.onclickItem.bind(this)));
                    }

                    onclickItem(evt){
                      evt.preventDefault();
                      evt.currentTarget.closest('.bundle__container').querySelectorAll('.bundle_item__wrapper').forEach(elm => elm.classList.remove('active'));
                      evt.currentTarget.classList.toggle('active');

                      const allActives = this.querySelectorAll('.bundle_item__wrapper.active');
                      let price = 0;
                      allActives.forEach(elm => {
                        price += parseFloat(elm.getAttribute('data-variantPrice'));
                      });
                      this.wrapperPrice.textContent = S/. ${price.toFixed(2)};
                    }
                  }
                  customElements.define('bundle-select', bundeSelect);

                  class bunmdleAddtoCart extends HTMLElement {
                    constructor(){
                      super();
                      
                      this.buttonAdd = this.querySelector('button');
                      this.buttonAdd.addEventListener('click', this.onclickAdd.bind(this));

                      this.bundleVariants = document.querySelectorAll('.bundle_item__wrapper');
                    }

                    async onclickAdd(evt) {
                      // console.log(evt.target);
                      if (this.buttonAdd.getAttribute('aria-disabled') === 'true') return;
                      
                      this.handleErrorMessage();
                      
                      this.buttonAdd.setAttribute('aria-disabled', true);
                      this.buttonAdd.classList.add('loading');
                      this.buttonAdd.closest('.product-buy-buttons--primary').setAttribute('data-loading', true);
                      this.buttonAdd.closest('.product-buy-buttons--primary').setAttribute('data-enabled', false);
                      this.querySelector('.product-buy-buttons--spinner').classList.remove('hidden');
                      
                      const config = this.fetchConfig('javascript');
                      config.headers['X-Requested-With'] = 'XMLHttpRequest';
                      // delete config.headers['Content-Type'];

                      const items = [];
                      let combineIds = '';
                      
                      this.bundleVariants.forEach(elm => {
                        if(!elm.classList.contains('active')) return;  

                        const idtoCombine = elm.getAttribute('data-vaiantId');
                        if(idtoCombine != null || idtoCombine != ''){
                          combineIds += _${elm.getAttribute('data-vaiantId')};
                        }
                      })

                      console.log('combineIds', combineIds);

                      this.bundleVariants.forEach(elm => {
                        if(!elm.classList.contains('active')) return;  

                        let slected = elm;
                        let variantSelc = slected.getAttribute('data-vaiantId');
                        
                        if(variantSelc == '' || variantSelc == null) return;

                        let item =  {
                          id: variantSelc,
                          quantity: 1,
                          properties: {
                            "_bundled": 1,
                            "_parentProduct": this.buttonAdd.getAttribute('data-parent-id'),
                            "_combineIds": ${this.buttonAdd.getAttribute('data-parent-id')}${combineIds}
                          }
                        }
                      
                        items.push(item);
                      });
                      
                      if(items.map(item => item.id).join('') == '' || items.map(item => item.id).join(',') == null ) {
                        this.buttonAdd.classList.remove('loading');
                        this.buttonAdd.closest('.product-buy-buttons--primary').setAttribute('data-loading', false);
                        this.buttonAdd.closest('.product-buy-buttons--primary').setAttribute('data-enabled', true);
                        this.buttonAdd.removeAttribute('aria-disabled');
                        this.querySelector('.product-buy-buttons--spinner').classList.add('hidden');
                        return;
                      };
                      
                      config.body = {
                        items: items
                      };
                      
                      // if (this.cart) {
                      //   config.body.sections = this.cart.getSectionsToRender().map((section) => section.id);
                      //   config.body.sections_url = window.location.pathname;
                      //   this.cart.setActiveElement(document.activeElement);
                      // }
                      
                      const drawer_cart = document.querySelector('cart-notification') || document.querySelector('cart-drawer') || document.querySelector('drawer-root') || theme.drawer ;
                      const _cart = theme.cart ;
                      
                      if (typeof config.body !== 'string') {
                        config.body = JSON.stringify(config.body);
                      }
                      
                      await fetch(${theme.urls.cart_add}, config)
                      .then((response) => response.json())
                      .then(async (response) => {
                        if (response.status) {
                          this.handleErrorMessage(response.description);

                          const soldOutMessage = this.buttonAdd.querySelector('.sold-out-message');
                          if (!soldOutMessage) return;
                          this.buttonAdd.setAttribute('aria-disabled', true);
                          this.buttonAdd.querySelector('span').classList.add('hidden');
                          soldOutMessage.classList.remove('hidden');
                          this.error = true;
                          return;
                        } else if (!drawer_cart) {
                          window.location = theme.urls.cart;
                          // console.log(_cart);
                          return;
                        }
                        await _cart.fetchTotals();
                        await _cart.updateAllHtml(!0), window.trigger("theme:cart:productAdded", items[0].id);
                        drawer_cart.open("right", "cart-drawer", this.primary_button)
                        this.error = false;
                      })
                      .catch((e) => {
                        console.error(e);
                      })
                      .finally(() => {
                        this.buttonAdd.classList.remove('loading');
                        // if (this.cart && this.cart.classList.contains('is-empty')) this.cart.classList.remove('is-empty');
                        if (!this.error) this.buttonAdd.removeAttribute('aria-disabled');
                        this.buttonAdd.closest('.product-buy-buttons--primary').setAttribute('data-loading', false);
                        this.buttonAdd.closest('.product-buy-buttons--primary').setAttribute('data-enabled', true);
                        this.querySelector('.product-buy-buttons--spinner').classList.add('hidden');
                      });
                    }
                    
                    fetchConfig(type = 'json') {
                      return {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', Accept: application/${type} },
                      };
                    }
                    
                    handleErrorMessage(errorMessage = false) {
                      if (this.hideErrors) return;

                      this.errorMessageWrapper =
                        this.errorMessageWrapper || this.querySelector('.product-form__error-message-wrapper');
                      if (!this.errorMessageWrapper) return;
                      this.errorMessage = this.errorMessage || this.errorMessageWrapper.querySelector('.product-form__error-message');

                      this.errorMessageWrapper.toggleAttribute('hidden', !errorMessage);

                      if (errorMessage) {
                        this.errorMessage.textContent = errorMessage;
                      }
                    }
                  }
                  customElements.define('bundle-addtocart',bunmdleAddtoCart);
                </script>
              {%- else -%}
                {%-
                  render 'product-buy-buttons',
                  id: product_id,
                  product: product,
                  smart_payment_enabled: block.settings.smart-payment-enabled
                -%}
              {%- endif -%}


            {%- when 'unavailable-form' -%}
              {%- render 'product-unavailable-form', product: product, id: product_id -%}

            {%- when 'pickup' -%}
              {%- render 'product-pickup', product: product, id: product_id -%}

            {%- when 'social-sharing' -%}
              {%-
                render 'social-icons',
                align: 'left',
                mobile_align: 'left',
                type: 'share',
                social_settings: block.settings
              -%}

            {%- when 'sku' -%}
              {%- render 'product-sku', product: product, id: product_id -%}

            {%- when 'collapsible-row' -%}
              {%- assign unique_id = section.id | append: '--collapsible-row--' | append: forloop.index -%}
              {%-
                render 'collapsible-row',
                description: block.settings.description,
                heading: block.settings.heading,
                default_open: block.settings.default-open,
                page_content: block.settings.page-content,
                unique_id: unique_id
              -%}

            {%- when 'description' -%}
              {%- unless product.description == blank -%}
                <div class="product-page--description" data-item="rte-content">
                  {{- product.description -}}
                </div>
              {%- endunless -%}

            {%- when 'rating' -%}
              {%- render 'product-rating' -%}

            {%- when 'complementary-products' -%}
              {%-
                render 'complementary-products',
                heading: block.settings.title,
                max_products: block.settings.max-products,
                collapsible_row: block.settings.collapsible-row-enabled,
                product_id: product.id
              -%}

            {%- when 'liquid' -%}
              {{- block.settings.custom-liquid -}}

            {%- when '@app' -%}
              {%- render block -%}

          {%- endcase -%}
        </div>
      {%- endfor -%}
    </div>
  </div>
</div>

{% schema %}
{
  "name": "Product pages",
  "class": "section--product-page",
  "settings": [
    {
      "type": "header",
      "content": "Style and layout"
    },
    {
      "id": "container-width",
      "label": "Maximum width of container",
      "type": "range",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4
    },
    {
      "id": "spacing-above",
      "label": "Spacing above",
      "type": "checkbox",
      "default": true
    },
    {
      "id": "spacing-below",
      "label": "Spacing below",
      "type": "checkbox",
      "default": true
    },
    {
      "type": "radio",
      "id": "media-layout",
      "label": "Media layout",
      "options": [
        { "label": "Thumbnails", "value": "thumbnails" },
        { "label": "One column", "value": "one" },
        { "label": "Two columns", "value": "two" },
        { "label": "Mixed", "value": "mixed" }
      ],
      "default": "thumbnails"
    },
    {
      "type": "range",
      "id": "text-column-width",
      "label": "Text column width",
      "min": 20,
      "max": 50,
      "step": 1,
      "unit": "px",
      "default": 30
    },
    {
      "type": "range",
      "id": "media-gap",
      "label": "Gap between media",
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "px",
      "default": 8
    },
    {
      "type": "select",
      "id": "column-spacing",
      "label": "Media spacing",
      "options": [
        { "label": "Spaced evenly", "value": "evenly" },
        { "label": "Close together", "value": "close" }
      ],
      "default": "close",
      "info": "Applies to the two column and mixed layouts only and will only be obvious when product media has different aspect ratios"
    },
    {
      "type": "select",
      "id": "text-alignment",
      "label": "Text alignment",
      "options": [
        { "label": "Left", "value": "left" },
        { "label": "Center", "value": "center" }
      ],
      "default": "left"
    },
    {
      "type": "range",
      "id": "thumbnail-width",
      "label": "Thumbnail width",
      "min": 40,
      "max": 140,
      "step": 1,
      "unit": "px",
      "default": 80,
      "info": "Only applies to the thumbnails layout"
    },
    {
      "type": "checkbox",
      "id": "heading-enabled",
      "label": "Enable title overlay",
      "default": false,
      "info": "Not applicable to the thumbnails layout"
    },
    {
      "type": "checkbox",
      "id": "heading-sizes-enabled",
      "label": "Enable overlay title size",
      "default": true
    },
    {
      "type": "range",
      "id": "heading-size",
      "label": "Overlay title size",
      "min": 0,
      "max": 100,
      "step": 1,
      "default": 40
    },
    {
      "type": "header",
      "content": "Features"
    },
    {
      "type": "checkbox",
      "id": "breadcrumbs-enabled",
      "label": "Enable breadcrumbs",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "modal-enabled",
      "label": "Enable modal popup",
      "default": true,
      "info": "Triggers when you click the selected media"
    },
    {
      "type": "checkbox",
      "id": "variant-scroll-enabled",
      "label": "Enable scroll to variant media",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "image-zoom-enabled",
      "label": "Enable image zoom",
      "default": true,
      "info": "Triggers when you roll your mouse over an image"
    },
    {
      "type": "checkbox",
      "id": "loop-enabled",
      "label": "Enable video looping",
      "default": false
    },
    {
      "type": "paragraph",
      "content": "Learn more about [media types](https://help.shopify.com/en/manual/products/product-media)."
    },
    {
      "type": "header",
      "content": "Mobile"
    },
    {
      "type": "radio",
      "id": "mobile-media-layout",
      "label": "Media layout",
      "options": [
        { "label": "Slideshow", "value": "slideshow" },
        { "label": "Thumbnails", "value": "thumbnails" }
      ],
      "default": "slideshow"
    }
  ],
  "blocks": [
    {
      "type": "overline",
      "name": "Overline text",
      "limit": 1,
      "settings": [
        {
          "label": "Overline text",
          "id": "text",
          "type": "text",
          "default": "Overline text"
        }
      ]
    },
    {
      "type": "heading",
      "name": "Title",
      "limit": 1,
      "settings": []
    },
    {
      "type": "vendor",
      "name": "Vendor",
      "limit": 1,
      "settings": []
    },
    {
      "type": "price",
      "name": "Price",
      "limit": 1,
      "settings": []
    },
    {
      "type": "quantity-selector",
      "name": "Quantity selector",
      "limit": 1,
      "settings": []
    },
    {
      "type": "low-stock",
      "name": "Low stock notice",
      "limit": 1,
      "settings": [
        {
          "label": "Show low in stock notice when quantity is",
          "id": "threshold",
          "type": "range",
          "min": 0,
          "max": 10,
          "step": 1,
          "default": 5,
          "info": "Set to 0 to disable this feature. Updated for each variant."
        }
      ]
    },
    {
      "type": "options",
      "name": "Variant picker",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "variant-style",
          "label": "Product variant style",
          "options": [
            { "label": "Dropdowns", "value": "dropdowns" },
            { "label": "Buttons", "value": "buttons" }
          ],
          "default": "buttons"
        },
        {
          "type": "checkbox",
          "id": "swatches-enabled",
          "label": "Enable color swatches",
          "default": true,
          "info": "Automatically turn color options into swatches. [Learn more](https://support.troopthemes.com/guide/color-swatch-guide)"
        },
        {
          "type": "header",
          "content": "Size chart"
        },
        {
          "type": "checkbox",
          "id": "size-chart-enabled",
          "label": "Enable",
          "default": true
        },
        {
          "type": "text",
          "id": "size-chart-option",
          "label": "Link from option",
          "default": "size"
        },
        {
          "type": "page",
          "id": "size-chart-content",
          "label": "Page content"
        }
      ]
    },
    {
      "type": "buy-buttons",
      "name": "Buy buttons",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "smart-payment-enabled",
          "label": "Show dynamic checkout button",
          "info": "Lets customers check out directly using a familiar payment method. [Learn more](https://help.shopify.com/manual/using-themes/change-the-layout/dynamic-checkout)",
          "default": true
        }
      ]
    },
    {
      "type": "unavailable-form",
      "name": "Unavailable form",
      "limit": 1,
      "settings": []
    },
    {
      "type": "pickup",
      "name": "Pickup availability",
      "limit": 1,
      "settings": []
    },
    {
      "type": "description",
      "name": "Description",
      "limit": 1,
      "settings": []
    },
    {
      "type": "social-sharing",
      "name": "Social sharing",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "facebook-enabled",
          "label": "Enable Facebook sharing",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "x-enabled",
          "label": "Enable 𝕏 sharing",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "pinterest-enabled",
          "label": "Enable Pinterest sharing",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "email-enabled",
          "label": "Enable email sharing",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "url-enabled",
          "label": "Enable URL sharing",
          "default": true
        }
      ]
    },
    {
      "type": "sku",
      "name": "SKU",
      "limit": 1,
      "settings": []
    },
    {
      "type": "collapsible-row",
      "name": "Collapsible row",
      "settings": [
        {
          "id": "heading",
          "label": "Heading",
          "type": "text",
          "default": "Collapsible row"
        },
        {
          "type": "richtext",
          "id": "description",
          "label": "Text",
          "default": "<p>Use rows to highlight unique features, <br/>sizing information, <br/>or other sales information.</p>",
          "info": "You can use product metafields to assign content to this row that is unique to an individual product. Learn more about [metafields](https://help.shopify.com/en/manual/metafields/displaying-metafields-on-your-online-store)."
        },
        {
          "type": "page",
          "id": "page-content",
          "label": "Tab content from page"
        },
        {
          "type": "checkbox",
          "id": "default-open",
          "label": "Open by default",
          "default": false
        }
      ]
    },
    {
      "type": "rating",
      "name": "Product rating",
      "limit": 1
    },
    {
      "type": "complementary-products",
      "name": "Complementary products",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Heading",
          "default": "Pairs well with"
        },
        {
          "id": "max-products",
          "label": "Maximum products to show",
          "type": "range",
          "min": 1,
          "max": 4,
          "step": 1,
          "default": 2,
          "info": "To select complementary products, add the Search & Discovery app. [Learn more](https://shopify.dev/themes/product-merchandising/recommendations)"
        },
        {
          "type": "checkbox",
          "id": "collapsible-row-enabled",
          "label": "Show as collapsible row",
          "default": false
        }
      ]
    },
    {
      "type": "liquid",
      "name": "Custom liquid",
      "settings": [
        {
          "type": "liquid",
          "id": "custom-liquid",
          "label": "Custom Liquid",
          "info": "Add app snippets or other Liquid code to create advanced customizations."
        }
      ]
    },
    {
      "type": "@app"
    }
  ]
}
{% endschema %}